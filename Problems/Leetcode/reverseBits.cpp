/*********************************************************************************************/
/* Problem: LC 190. Reverse Bits ********/
/*********************************************************************************************/
/*
--Problem statement:
  Reverse bits of a given 32 bits unsigned integer.
  Note:
    -In some languages, such as Java, there is no unsigned integer type. In this case, both input
    and output will be given as a signed integer type. They should not affect your implementation,
    as the integer's internal binary representation is the same, whether it is signed or unsigned.
    -In Java, the compiler represents the signed integers using 2's complement notation. Therefore,
    in Example 2 above, the input represents the signed integer -3 and the output represents the
    signed integer -1073741825.

  > Example 1:
    Input: n = 00000010100101000001111010011100
    Output:    964176192 (00111001011110000010100101000000)
    Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned
    integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.

  > Example 2:
    Input: n = 11111111111111111111111111111101
    Output:   3221225471 (10111111111111111111111111111111)
    Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer
    4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.

--Inputs:
  -uint32_t: 32 bits unsigned integer.

--Output:
  -uint32_t: 32 bits unsigned integer.

--Constraints:
  :: The input must be a binary string of length 32

--Reasoning: See comments below.

--Time complexity: O(32) = ~O(1), where 32 is the number of bits.

--Space complexity: O(1), no additional input dependent space is allocated.

*/

#include <iostream>

uint32_t reverseBits(uint32_t n) {
  uint32_t res{0};

  for (int i{0}; i < 32 /*bits*/; ++i) {
    // shift into result:
    res = res << 1;

    res = res | (n & 1);

    // shift out of n:
    n = n >> 1;
  }

  return res;
}

int main() {
  uint32_t n{43261596};
  std::cout << "Reversed bits result: " << reverseBits(n) << "\n";

  n = 4294967293;
  std::cout << "Reversed bits result: " << reverseBits(n) << "\n";

  return 0;
}

/*
i=0:
  res = res << 1 --> res = 00000000000000000000000000000000
  res = res | (n & 1)
      = (00000000000000000000000000000000) | (00000010100101000001111010011100 & 00000000000000000000000000000001)
      = (00000000000000000000000000000000) | (00000000000000000000000000000000)
      = (00000000000000000000000000000000)

  n = n >> 1 --> n = 00000001010010100000111101001110

i=1:
  res = res << 1 --> res = 00000000000000000000000000000000
  res = res | (n & 1)
      = (00000000000000000000000000000000) | (00000001010010100000111101001110 & 00000000000000000000000000000001)
      = (00000000000000000000000000000000) | (00000000000000000000000000000000)
      = (00000000000000000000000000000000)

  n = n >> 1 --> n = 00000000101001010000011110100111

i=2:
  res = res << 1 --> res = 00000000000000000000000000000000
  res = res | (n & 1)
      = (00000000000000000000000000000000) | (00000000101001010000011110100111 & 00000000000000000000000000000001)
      = (00000000000000000000000000000000) | (00000000000000000000000000000001)
      = (00000000000000000000000000000001)

  n = n >> 1 --> n = 00000000010100101000001111010011

i=3:
  res = res << 1 --> res = 00000000000000000000000000000010
  res = res | (n & 1)
      = (00000000000000000000000000000010) | (00000000010100101000001111010011 & 00000000000000000000000000000001)
      = (00000000000000000000000000000010) | (00000000000000000000000000000001)
      = (00000000000000000000000000000011)

  n = n >> 1 --> n = 00000000001010010100000111101001

i=4:
  res = res << 1 --> res = 00000000000000000000000000000110
  res = res | (n & 1)
      = (00000000000000000000000000000110) | (00000000001010010100000111101001 & 00000000000000000000000000000001)
      = (00000000000000000000000000000110) | (00000000000000000000000000000001)
      = (00000000000000000000000000000111)

  n = n >> 1 --> n = 00000000000101001010000011110100

i=5:
  res = res << 1 --> res = 00000000000000000000000000001110
  res = res | (n & 1)
      = (00000000000000000000000000001110) | (00000000000101001010000011110100 & 00000000000000000000000000000001)
      = (00000000000000000000000000001110) | (00000000000000000000000000000000)
      = (00000000000000000000000000001110)

  n = n >> 1 --> n = 00000000000010100101000001111010

i=6:
  res = res << 1 --> res = 00000000000000000000000000011100
  res = res | (n & 1)
      = (00000000000000000000000000011100) | (00000000000010100101000001111010 & 00000000000000000000000000000001)
      = (00000000000000000000000000011100) | (00000000000000000000000000000000)
      = (00000000000000000000000000011100)

  n = n >> 1 --> n = 00000000000001010010100000111101

i=7:
  res = res << 1 --> res = 00000000000000000000000000111000
  res = res | (n & 1)
      = (00000000000000000000000000111000) | (00000000000001010010100000111101 & 00000000000000000000000000000001)
      = (00000000000000000000000000111000) | (00000000000000000000000000000001)
      = (00000000000000000000000000111001)

  n = n >> 1 --> n = 00000000000000101001010000011110

....
*/